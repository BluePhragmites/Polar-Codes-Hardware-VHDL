-------------------------------------------------------------
-- This file is generated through a matalab script. For    --
-- any problems please contact to paraskeu@ceid.upatras.gr --
-- with subject: create_SNRLUT script. Thank you!          --
-------------------------------------------------------------

----snrlut_new 2:0.1:8.2

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_signed.all;
use ieee.numeric_std.all;

entity snrlut is
port ( SNR: in std_logic_vector (5 downto 0);
	sigma: out signed(39 downto 0);
	sigma2: out signed(39 downto 0));
end snrlut;

architecture struct of snrlut is

signal s1,s2: signed( 39 downto 0);

begin

process(SNR)
begin
case SNR is
	when "000000" => s1<="0000000000000000000000000000000000000000"; 
	s2<="1111111100000000000000000000000000000000";
	when "000001" => s1<="0000000010100110000010000111000010110011";
      s2<="1111110110011111011001101010100011011100";
	when "000010" => s1<="0000000010100100001000011110010101011011";
    	s2<="1111110110010001001110011001010010000111";
	when "000011" => s1<="0000000010100010010000001110101111001010";
      s2<="1111110110000010101101111111011111111001";
	when "000100" => s1<="0000000010100000011001010111001110101100";
   	 s2<="1111110101110011110111111101101100100010";
	when "000101" => s1<="0000000010011110100011110110110011100000";
   	 s2<="1111110101100100101011110011101000110010";
	when "000110" => s1<="0000000010011100101111101100011101110010";
   	 s2<="1111110101010101001001000000010101011000";
	when "000111" => s1<="0000000010011010111100110111001110011111";
   	 s2<="1111110101000101001111000010000001110101";
	when "001000" => s1<="0000000010011001001011010110000111010000";
    	s2<="1111110100110100111101010110001011011000";
	when "001001" => s1<="0000000010010111011011001000001010011101";
    	s2<="1111110100100100010011011001011011101110";
	when "001010" => s1<="0000000010010101101100001100011011001011";
    	s2<="1111110100010011010000100111100111111001";
	when "001011" => s1<="0000000010010011111110100001111101001010";
    	s2<="1111110100000001110100011011101110111111";
	when "001100" => s1<="0000000010010010010010000111110100111010";
   	 s2<="1111110011101111111110001111111000111010";
	when "001101" => s1<="0000000010010000100110111101000111100010";
   	 s2<="1111110011011101101101011101010101001001";
	when "001110" => s1<="0000000010001110111101000000111010110111";
   	 s2<="1111110011001011000001011100011001010110";
	when "001111" => s1<="0000000010001101010100010010010101011000";
      s2<="1111110010110111111001100100100000000100";
	when "010000" => s1<="0000000010001011101100110000011110001110";
      s2<="1111110010100100010101001100000111010111";
	when "010001" => s1<="0000000010001010000110011010011101001011";
      s2<="1111110010010000010011101000101111010111";
	when "010010" => s1<="0000000010001000100001001111011010101100";
      s2<="1111110001111011110100001110111000110111";
	when "010011" => s1<="0000000010000110111101001110011111110101";
      s2<="1111110001100110110110010010000011110100";
	when "010100" => s1<="0000000010000101011010010110110110010011";
      s2<="1111110001010001011001000100101101110100";
      when "010101" => s1<="0000000010000011111000100111101000011011";
      s2<="1111110000111011011011111000010000101000";
	when "010110" => s1<="0000000010000010011000000000000001001000";
      s2<="1111110000100100111101111101000000011110";
	when "010111" => s1<="0000000010000000111000011111001011111101";
      s2<="1111110000001101111110100010001010100100";
	when "011000" => s1<="0000000001111111011010000100010101000011";
      s2<="1111101111110110011100110101110011010101";
	when "011001" => s1<="0000000001111101111100101110101001001010";
      s2<="1111101111011110011000000100110100110010";
	when "011010" => s1<="0000000001111100100000011101010101100111";
      s2<="1111101111000101101111011010111100101111";
	when "011011" => s1<="0000000001111011000101001111101000010010";
      s2<="1111101110101100100010000010101011001000";
	when "011100" => s1<="0000000001111001101011000100101111101100";
      s2<="1111101110010010101111000101010000000011";
	when "011101" => s1<="0000000001111000010001111011111010110110";
      s2<="1111101101111000010101101010101010000100";
	when "011110" => s1<="0000000001110110111001110100011001010111";
      s2<="1111101101011101010100111001100100001001";
	when "011111" => s1<="0000000001110101100010101101011011011011";
      s2<="1111101101000001101011110111010011110111";
	when "100000" => s1<="0000000001110100001100100110010001101101";
      s2<="1111101100100101011001100111110111010010";
	when "100001" => s1<="0000000001110010110111011110001101011110";
      s2<="1111101100001000011101001101110011000010";
	when "100010" => s1<="0000000001110001100011010100100000100000";
      s2<="1111101011101010110101101010010000001000";
	when "100011" => s1<="0000000001110000010000001000011101000110";
      s2<="1111101011001100100001111100111001111000";
	when "100100" => s1<="0000000001101110111101111001010110000111";
      s2<="1111101010101101100001000011111011101111";
	when "100101" => s1<="0000000001101101101100100110011110111001";
      s2<="1111101010001101110001111011111111000001";
	when "100110" => s1<="0000000001101100011100001111001011010011";
      s2<="1111101001101101010011100000001000100101";
	when "100111" => s1<="0000000001101011001100110010101111101101";
      s2<="1111101001001100000100101001110110100111";
	when "101000" => s1<="0000000001101001111110010000100000111110";
      s2<="1111101000101010000100010000111110000111";
	when "101001" => s1<="0000000001101000110000100111110100011110";
      s2<="1111101000000111010001001011101000100000";
	when "101010" => s1<="0000000001100111100011111000000000000010";
      s2<="1111100111100011101010001110010001000110";
	when "101011" => s1<="0000000001100110011000000000011010000001";
      s2<="1111100110111111001110001011100010100101";
	when "101100" => s1<="0000000001100101001101000000011001001101";
      s2<="1111100110011001111011110100010100010100";
	when "101101" => s1<="0000000001100100000010110111010100111001";
      s2<="1111100101110011110001110111100111101101";
	when "101110" => s1<="0000000001100010111001100100100100110110";
      s2<="1111100101001100101111000010100101011100";
	when "101111" => s1<="0000000001100001110001000111100001001111";
      s2<="1111100100100100110010000000011010101101";
	when "110000" => s1<="0000000001100000101001011111100010101111";
      s2<="1111100011111011111001011010010110001110";
	when "110001" => s1<="0000000001011111100010101100000010011111";
      s2<="1111100011010010000011110111100101011010";
	when "110010" => s1<="0000000001011110011100101100011010000000";
      s2<="1111100010100111001111111101010001010100";
	when "110011" => s1<="0000000001011101010111100000000011010100";
      s2<="1111100001111011011100001110011011011111";
	when "110100" => s1<="0000000001011100010011000110011000110111";
      s2<="1111100001001110100111001011111010111101";
	when "110101" => s1<="0000000001011011001111011110110101011110";
      s2<="1111100000100000101111010100011000110110";
	when "110110" => s1<="0000000001011010001100101000110100011110";
      s2<="1111011111110001110011000100001101001101";
      when "110111" => s1<="0000000001011001001010100011110001100011";
      s2<="1111011111000001110000110101011011100000";
	when "111000" => s1<="0000000001011000001001001111001000110101";
      s2<="1111011110010000100110111111101111010010";
	when "111001" => s1<="0000000001010111001000101010010110110111";
      s2<="1111011101011110010011111000011000100100";
	when "111010" => s1<="0000000001010110001000110100111000100100";
      s2<="1111011100101010110101110010001000001110";
	when "111011" => s1<="0000000001010101001001101110001011010011";
      s2<="1111011011110110001010111101001100010010";
	when "111100" => s1<="0000000001010100001011010101101100110011";
      s2<="1111011011000000010001100111001100001001";
	when "111101" => s1<="0000000001010011001101101010111011001101";
      s2<="1111011010001001000111111011000100101100";
	when "111110" => s1<="0000000001010010010000101101010101000001";
      s2<="1111011001010000101100000001000100010010";
	when "111111" => s1<="0000000001010001010100011100011001001001";
      s2<="1111011000010110111011111110100110110001";
	when others => s1 <= (others=>'0'); s2 <= (others=>'0');
end case;
end process;

sigma<=s1;
sigma2<=s2;
end struct;
